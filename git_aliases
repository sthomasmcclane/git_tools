##### Git Aliases and Functions!

# Configuration!
GIT_TOOLS_DIR="$HOME/Squiz/git_tools" # Updated path
SQUIZ_PROJECT_DIR="$HOME/Squiz"
SQUIZ_DOCS_SOURCE="$HOME/Squiz/squiz-documentation/source"
GIT_ALIASES_FILE="$GIT_TOOLS_DIR/git_aliases" # Updated path
REPO_URLS_FILE="$SQUIZ_PROJECT_DIR/squiz-tools/repo_urls.txt" # Updated path
YELLOW='\033[0;93m' # ANSI escape code for a brighter yellow color
RESET='\033[0m'    # ANSI escape code to reset the color

## Aliases

# gitmerged: Invoke the merger script.
alias gitmerged="$GIT_TOOLS_DIR/gitmerged.sh"

# gitup: Pushes commits to remote repository and prompts for Grammarly pass
alias gitup="$GIT_TOOLS_DIR/gitup.sh"

# gitout: Delete a remote branch, its tracking reference, and the local branch
alias gitout="$GIT_TOOLS_DIR/gitout.sh"

## Functions

# gitemall: Reclone all repos from GitLab. Execute in squiz-documentation/source directory.
gitemall() {
  if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    echo "Usage: gitemall [target_directory]"
    echo "  Reclone all repos listed in $REPO_URLS_FILE from GitLab into the specified directory (or default)."
    echo "  [target_directory] (optional): The directory to clone the repos into. Defaults to $SQUIZ_DOCS_SOURCE"
    return 0
  fi

  local target_dir="$SQUIZ_DOCS_SOURCE"

  if [ -n "$1" ]; then
    target_dir="$1"
  fi

  if [ ! -d "$target_dir" ]; then
    echo "Directory $target_dir does not exist"
    return 1
  fi

  cd "$target_dir" || { echo "Error changing directory to $target_dir"; return 1; }

  while read -r url; do
    echo "Cloning $url"
    git clone "$url" || { echo "Error cloning $url"; return 1;}
  done < "$REPO_URLS_FILE"
}
alias gitemall="gitemall"


# gitupfirst: Pushes current branch and sets upstream
gitupfirst() {
  if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    echo "Usage: gitupfirst"
    echo "  Pushes the current branch to the remote repository and sets it as the upstream branch."
    return 0
  fi
  git push -u origin "$(git rev-parse --abbrev-ref HEAD)" "$@"
}
alias gitupfirst="gitupfirst"

# gitgud: Display information about custom Git commands
gitgud() {
  if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    echo "Usage: gitgud"
    echo "  Displays information about custom Git commands defined in $GIT_ALIASES_FILE."
    return 0
  fi
  grep -E "^#" "$GIT_ALIASES_FILE" | grep -v "!"
}
alias gitgud="gitgud"



# gitunstuck: Perform a merge from the remote version of the repo when you can't push or pull without errors
gitunstuck(){
  if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    echo "Usage: gitunstuck"
    echo "  Performs a merge from the remote version of the current branch when you are having difficulty pushing or pulling."
    return 0
  fi
  git fetch origin;git merge origin/"$(git rev-parse --abbrev-ref HEAD)" "$@"
}
alias gitunstuck="gitunstuck"

# gitin: Commit with current branch name and custom comment
gitin() {
  if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    echo "Usage: gitin <commit-message>"
    echo "  Commits all staged changes with a message including the current branch name."
    echo "  <commit-message>: The commit message."
    return 0
  fi
  if [ -z "$@" ]; then
    echo "Error: Commit message is required."
    echo "Usage: gitin <commit-message>"
    return 1
  fi
  local branch=$(git rev-parse --abbrev-ref HEAD)
  echo "Committing to branch: $branch"
  git commit -am "$branch #comment $@"
}

# gitdown: Change to Squiz project directory and update all Git repositories
gitdown() {
  if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    echo "Usage: gitdown"
    echo "  Changes to the Squiz project directory and updates all Git repositories within it."
    return 0
  fi
  cd "$SQUIZ_PROJECT_DIR" || { echo "Directory $SQUIZ_PROJECT_DIR not found."; return 1; }

  find . -type d -name .git -print0 | while IFS= read -r -d '' gitdir; do
    local repo_dir
    repo_dir=$(dirname "$gitdir")

    printf "${YELLOW}Updating repository in $repo_dir${RESET}\n"

    (
      cd "$repo_dir" || { echo "Error changing directory to $repo_dir"; exit 1; }

      if git rev-parse --verify --quiet origin/master; then
        git -c core.quotepath=false checkout master || echo "Ignoring error checking out master" && git -c core.quotepath=false checkout master 2>/dev/null
        git -c core.quotepath=false pull || { echo "Error pulling master in $repo_dir"; exit 1; }
      elif git rev-parse --verify --quiet origin/main; then
          git -c core.quotepath=false checkout main || echo "Ignoring error checking out main" && git -c core.quotepath=false checkout main 2>/dev/null
          git -c core.quotepath=false pull || { echo "Error pulling main in $repo_dir"; exit 1; }
      else
        echo "No master branch exists for $repo_dir"
      fi

      if git rev-parse --verify --quiet origin/documentation-public; then
        git -c core.quotepath=false checkout documentation-public || echo "Ignoring error checking out master" && git -c core.quotepath=false checkout documentation-public 2>/dev/null
        git -c core.quotepath=false pull || { echo "Error pulling documentation-public in $repo_dir"; exit 1; }
      else
        echo "No documentation-public branch exists for $repo_dir"
      fi
      git branch --merged | grep -v "\*" | xargs -r git branch -d 2>/dev/null
    )
  done
}

# gitback: Restore all modified files (discarding uncommitted changes)
gitback() {
  if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    echo "Usage: gitrekt"
    echo "  Restores all modified files to their last committed state, discarding any uncommitted changes."
    return 0
  fi
    git restore --staged . || echo "Nothing to restore in the index"
    git restore . || echo "Nothing to restore in the working directory"
}

gitit() {
  if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    echo "Usage: gitit <branch-name | branch-number | main | public>"
    echo "  Checks out the specified branch with the following enhancements:"
    echo "  - If <branch-name> is a number, it prepends 'C4E-'."
    echo "  - If <branch-name> is 'main', it checks out 'main' or 'master'."
    echo "  - If <branch-name> is 'public', it checks out 'documentation-public'."
    echo "  - Otherwise, it attempts to check out the branch as is."
    return 0
  fi

  if [ -z "$1" ]; then
    echo "Error: Branch name is required."
    echo "Usage: gitit <branch-name | branch-number | main | public>"
    return 1
  fi

  local branch_name="$1"

  # Check if the input is a number (assuming it's a C4E ticket number)
  if [[ "$branch_name" =~ ^[0-9]+$ ]]; then
    branch_name="C4E-$branch_name"
  elif [[ "$branch_name" == "main" || "$branch_name" == "master" ]]; then
    # Check for 'main' or 'master'
    if git rev-parse --verify --quiet "main"; then
      branch_name="main"
    elif git rev-parse --verify --quiet "master"; then
      branch_name="master"
    else
      echo "Error: Neither 'main' nor 'master' branch exists."
      return 1
    fi
  elif [[ "$branch_name" == "public" ]]; then
    branch_name="documentation-public"
  fi

  if git rev-parse --verify --quiet "$branch_name"; then
    git checkout "$branch_name"
  else
    echo "Branch $1 does not exist"
    return 1
  fi
}

# gitinfo: Outputs the today's commit messages in reverse chronological order.
gitinfo() {
  if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    echo "Usage: gitday"
    echo "  Outputs today's commit messages in reverse chronological order."
    return 0
  fi
    local today=$(date +"%Y-%m-%d")
    git log --after="$today 00:00" --before="$today 23:59" --pretty=format:"%s" --reverse
}

# githead: Reset HEAD to the chosen commit.
githead() {
local commit_hashes commit_messages selected_hash selected_message IFS limit=5

  # Get commit hashes and messages, preserving spaces, limited to $limit commits.
  IFS=$'\n' read -d '' -r -a commit_messages < <(git log --oneline --pretty=%B -n "$limit")
  IFS=$'\n' read -d '' -r -a commit_hashes < <(git log --oneline --pretty=%H -n "$limit")

  # Create a numbered list of commits.
  echo "Select a commit to reset to (all commits after will be discarded):"
  select selected_message in "${commit_messages[@]}"; do
    if [[ -n "$selected_message" ]]; then
      selected_hash=$(echo "${commit_hashes[$REPLY-1]}")
      break
    else
      echo "Invalid selection."
    fi
  done

  # Confirm and perform the reset.
  if [[ -n "$selected_hash" ]]; then
    read -p "Are you sure you want to reset to commit '$selected_message' ($selected_hash)? (y/n): " confirm
    if [[ "$confirm" == "y" ]]; then
      git reset --hard "$selected_hash"
      echo "Reset successful to commit '$selected_message' ($selected_hash)."
    else
      echo "Reset canceled."
    fi
  fi
}