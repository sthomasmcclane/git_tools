##### Git Aliases and Functions!

# Configuration!
SQUIZ_TOOLS_BIN="/Users/sthomas/Squiz/squiz-tools/bin"
SQUIZ_PROJECT_DIR="/Users/sthomas/Squiz"
YELLOW='\033[0;93m' # ANSI escape code for a brighter yellow color
RESET='\033[0m'    # ANSI escape code to reset the color

##### Aliases!

# gitemall: Reclone all repos from GitLab. Exectute in squiz-documentation/source directory.
alias gitemall="cd /Users/sthomas/Squiz/squiz-documentation/source; while read -r url; do git clone "$url"; done < ../../squiz-tools/repo_urls.txt"

# gitmerged: Invoke the merger script.
alias gitmerged="$SQUIZ_TOOLS_BIN/gitmerged.sh"

# gitup: Pushes commits to remote repository
alias gitup='git push'

# gitupfirst: Pushes current branch and sets upstream
alias gitupfirst='git push -u origin "$(git rev-parse --abbrev-ref HEAD)"'

# gitgud: Display information about custom Git commands
alias gitgud='grep -E "^#" ~/Squiz/squiz-tools/git_aliases | grep -v "!"'

# gitout: Delete a remote branch, its tracking reference, and the local branch
alias gitout="$SQUIZ_TOOLS_BIN/gitout.sh"

# gitunstuck: Perform a merge from the remote version of the repo when you can't push or pull without errors
alias gitunstuck='git fetch origin;git merge origin/"$(git rev-parse --abbrev-ref HEAD)"'

##### Functions!

# gitin: Commit with current branch name and custom comment
gitin() {
  if [ -z "$@" ]; then
    echo "Usage: gitin <commit-message>"
    return 1
  fi
  local branch
  branch=$(git rev-parse --abbrev-ref HEAD)
  git commit -am "$branch #comment $@"
}

# gitdown: Change to Squiz project directory and update all Git repositories
gitdown() {
  cd "$SQUIZ_PROJECT_DIR" || { echo "Directory $SQUIZ_PROJECT_DIR not found."; return 1; }

  find . -type d -name .git -print0 | while IFS= read -r -d '' gitdir; do
    local repo_dir
    repo_dir=$(dirname "$gitdir")

    printf "${YELLOW}Updating repository in $repo_dir${RESET}\n"

    (
      cd "$repo_dir" || exit
      git -c core.quotepath=false checkout master 2>/dev/null
      git -c core.quotepath=false pull 2>/dev/null
      git -c core.quotepath=false checkout documentation-public 2>/dev/null
      git -c core.quotepath=false pull 2>/dev/null
    )
  done
}

# gitrekt: Restore all modified files (discarding uncommitted changes)
gitrekt() {
  git status --porcelain | grep '^ M' | awk '{print $2}'| cut -f2- -d'/' | xargs -r git restore
}

# gitit: Checkout a specified branch
gitit() {
  if [ -z "$1" ]; then
    echo "Usage: gitit <branch-name>"
    return 1
  fi
  git checkout "$@"
}

# gitday: Outputs the today's commit messages in reverse chronological order.
gitday() {
    local today=$(date +"%Y-%m-%d")
    git log --after="$today 00:00" --before="$today 23:59" --pretty=format:"%s" --reverse
}
